{"version":3,"sources":["locales sync /^/.//.*/.json$","components/RandomTag.js","data.js","images/gamepad_white.svg","images/pt.svg","images/en.svg","App.js","theme.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","useStyles","makeStyles","theme","tag","paddingLeft","paddingRight","marginRight","marginBottom","cursor","tagText","fontSize","color","defineMessages","injectIntl","props","classes","text","tooltip","onClick","Tooltip","title","aria-label","Paper","className","style","backgroundColor","Typography","variant","GENRES","MECHANICS","THEMES","getRandomGenre","Math","floor","random","length","getRandomMechanic","getRandomTheme","translateMessages","genre","defaultMessage","mechanic","genres","mechanics","themes","randomize","share","by","and","madeWith","mechanicSliderLabel","gameIdeaTitle","howToFineTune","howToEnd","howToMiddle","howToStart","howToDescription","howToTitle","Copyright","Link","href","Date","getFullYear","root","display","flexDirection","minHeight","main","marginTop","spacing","footer","padding","palette","type","grey","footerContainer","justifyContent","alignItems","toolbar","card","paddingTop","paddingBottom","formBox","dataLine","flexWrap","instructionsBox","slider","width","fontWeight","dialogRoot","margin","dialogCloseButton","position","right","top","dialogTextBox","formatMessage","intl","React","useState","data","setGenre","setMechanic","setTheme","mechSlider","setSlider","openDialog","setOpen","updArrayOnIndex","arr","index","value","aux","handleSlider","newSize","newDataCallback","slice","Array","forEach","push","updArraySize","useEffect","parsed","queryString","parse","location","search","g","m","parseInt","indexes","split","pThemes","pMechanics","pGenres","i","console","warn","shareUrl","sliderValue","genreIndexes","indexOf","mechIndexes","gString","concat","join","shareMessage","AppBar","Toolbar","flexShrink","src","gamepadIcon","height","textDecoration","noWrap","flex","flexGrow","ptIcon","enIcon","Dialog","open","DialogTitle","component","IconButton","DialogContent","DialogActions","EmailShareButton","url","body","EmailIcon","round","FacebookShareButton","quote","FacebookIcon","RedditShareButton","RedditIcon","WhatsappShareButton","WhatsappIcon","TelegramShareButton","TelegramIcon","TwitterShareButton","TwitterIcon","Container","maxWidth","Box","my","gutterBottom","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","onChangeCommitted","_","Button","Card","CardHeader","CardContent","mech","CardActions","createMuiTheme","primary","secondary","error","red","A400","background","default","prototype","this","messages","require","ReactDOM","render","locale","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.fc95af26.chunk.js","sourcesContent":["var map = {\n\t\"./en.json\": 120,\n\t\"./pt.json\": 121\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 119;","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nimport { defineMessages, injectIntl } from 'react-intl'\n\nconst useStyles = makeStyles((theme) => ({\n  tag: {\n    paddingLeft: 10,\n    paddingRight: 10,\n    marginRight: 5,\n    marginBottom: 5,\n    cursor: 'pointer',\n  },\n  tagText: {\n    fontSize: '1.6em',\n    color: 'white'\n  }\n}))\n\nconst translateMessages = defineMessages({})\n\nfunction RandomTag(props) {\n  const classes = useStyles()\n\n  const { text, tooltip, color, onClick } = props\n\n  return (\n    <Tooltip title={tooltip} aria-label={tooltip}>\n      <Paper className={classes.tag} style={{ backgroundColor: color }} onClick={onClick}>\n        <Typography variant=\"body1\" className={classes.tagText} style={{ color: 'white' }}>\n          {text}\n        </Typography>\n      </Paper>\n    </Tooltip>\n  )\n}\n\nexport default injectIntl(RandomTag)\n","\nconst GENRES = [\n  \"tactics strategy\",\n  \"real time strategy\",\n  \"platformer\",\n  \"rogue-like\",\n  \"mmo rpg\",\n  \"rpg\",\n  \"shoot em up\",\n  \"racing\",\n  \"first person shooter\",\n  \"arcade\",\n  \"street fighter\",\n]\n\nconst MECHANICS = [\n  \"duel\",\n  \"card game\",\n  \"steal the flag\",\n  \"tower defense\",\n  \"survive to the end\",\n  \"find all items\",\n  \"with timer\",\n  \"build structures\",\n  \"build your player\",\n  \"sandbox\",\n  \"procedural generated\",\n  \"investigation\",\n  \"manage your shop\",\n  \"manage your vehicle\",\n  \"must co-op\",\n]\n\nconst THEMES = [\n  \"medieval\",\n  \"fantasy\",\n  \"non sense\",\n  \"japanese\",\n  \"hi-tech\",\n  \"modern\",\n  \"abstract\",\n  \"steampunk\",\n  \"cyberpunk\",\n  \"egypt\",\n  \"vintage\",\n  \"dark fantasy\",\n]\n\nexport const getGenre = (i) => GENRES[i]\nexport const getMechanic = (i) => MECHANICS[i]\nexport const getTheme = (i) => THEMES[i]\n\nexport const getRandomGenre = () => {\n  return GENRES[Math.floor(Math.random() * GENRES.length)]\n}\nexport const getRandomMechanic = () => {\n  return MECHANICS[Math.floor(Math.random() * MECHANICS.length)]\n}\nexport const getRandomTheme = () => {\n  return THEMES[Math.floor(Math.random() * THEMES.length)]\n}\n\nexport const buildUrl = (genres, themes, mechanics, sliderValue) => {\n  const genreIndexes = genres.map(value => GENRES.indexOf(value))\n  const mechIndexes = mechanics.map(value => MECHANICS.indexOf(value))\n  const themeIndexes = themes.map(value => THEMES.indexOf(value))\n  const gString = themeIndexes.concat(mechIndexes).concat(genreIndexes).join('.')\n  return `?g=${gString}&m=${sliderValue}`\n}\n","export default __webpack_public_path__ + \"static/media/gamepad_white.be479900.svg\";","export default __webpack_public_path__ + \"static/media/pt.17f97f51.svg\";","export default __webpack_public_path__ + \"static/media/en.ce709bf8.svg\";","import React, { useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport queryString from 'query-string'\nimport { defineMessages, injectIntl } from 'react-intl'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport Link from '@material-ui/core/Link'\nimport Button from '@material-ui/core/Button'\nimport Slider from '@material-ui/core/Slider'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\n\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport ShareIcon from '@material-ui/icons/Share'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\nimport CloseIcon from '@material-ui/icons/Close'\n\nimport {\n  EmailShareButton,\n  EmailIcon,\n  RedditShareButton,\n  RedditIcon,\n  FacebookShareButton,\n  FacebookIcon,\n  WhatsappShareButton,\n  WhatsappIcon,\n  TelegramShareButton,\n  TelegramIcon,\n  TwitterShareButton,\n  TwitterIcon\n} from \"react-share\";\n\nimport RandomTag from './components/RandomTag'\nimport * as data from './data'\n\nimport gamepadIcon from './images/gamepad_white.svg'\nimport ptIcon from './images/pt.svg'\nimport enIcon from './images/en.svg'\n\nconst PUBLIC_URL = ''\n\nconst translateMessages = defineMessages({\n\tgenre: {\n\t\tid: 'app.genre',\n\t\tdefaultMessage: 'Genre'\n\t},\n\tmechanic: {\n\t\tid: 'app.mechanic',\n\t\tdefaultMessage: 'Mechanic'\n\t},\n\ttheme: {\n\t\tid: 'app.theme',\n\t\tdefaultMessage: 'Theme'\n\t},\n\tgenres: {\n\t\tid: 'app.genres',\n\t\tdefaultMessage: 'Genres'\n\t},\n\tmechanics: {\n\t\tid: 'app.mechanics',\n\t\tdefaultMessage: 'Mechanics'\n\t},\n\tthemes: {\n\t\tid: 'app.themes',\n\t\tdefaultMessage: 'Themes'\n\t},\n\trandomize: {\n\t\tid: 'app.randomize',\n\t\tdefaultMessage: 'Randomize'\n\t},\n\tshare: {\n\t\tid: 'app.share',\n\t\tdefaultMessage: 'Share'\n\t},\n\ttitle: {\n\t\tid: 'app.title',\n\t\tdefaultMessage: 'Game Idea Generator'\n\t},\n\tby: {\n\t\tid: 'app.by',\n\t\tdefaultMessage: 'by'\n\t},\n\tand: {\n\t\tid: 'app.and',\n\t\tdefaultMessage: 'and'\n\t},\n\tmadeWith: {\n\t\tid: 'app.madeWith',\n\t\tdefaultMessage: 'Made with'\n\t},\n\tmechanicSliderLabel: {\n\t\tid: 'app.mechanicSlider.label',\n\t\tdefaultMessage: 'How many Mechanics?'\n\t},\n\tgameIdeaTitle: {\n\t\tid: 'app.gameIdea.title',\n\t\tdefaultMessage: 'What about a'\n\t},\n\thowToFineTune: {\n\t\tid: 'app.howTo.fineTune',\n\t\tdefaultMessage: 'You can click on each tag to randomize it and fine-tune your game idea!'\n\t},\n\thowToEnd: {\n\t\tid: 'app.howTo.end',\n\t\tdefaultMessage: 'to generate a random set of tags.'\n\t},\n\thowToMiddle: {\n\t\tid: 'app.howTo.middle',\n\t\tdefaultMessage: 'you\\'ll want and click'\n\t},\n\thowToStart: {\n\t\tid: 'app.howTo.start',\n\t\tdefaultMessage: 'Select how many'\n\t},\n\thowToDescription: {\n\t\tid: 'app.howTo.description',\n\t\tdefaultMessage: 'You game idea is a combination of three tags:'\n\t},\n\thowToTitle: {\n\t\tid: 'app.howTo.title',\n\t\tdefaultMessage: 'How to use?'\n\t},\n\thowToMiddle: {\n\t\tid: 'app.howTo.middle',\n\t\tdefaultMessage: 'you\\'ll want and click'\n\t},\n\thowToMiddle: {\n\t\tid: 'app.howTo.middle',\n\t\tdefaultMessage: 'you\\'ll want and click'\n\t},\n})\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://github.com/AndreMicheletti/game-idea-generator/blob/master/LICENSE\">\n        André Micheletti\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh',\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n  },\n  footerContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n\t},\n\ttoolbar: {\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'center'\n\t},\n  card: {\n    backgroundColor: \"#333\",\n    padding: 30,\n    paddingTop: 15,\n    paddingBottom: 15,\n  },\n  formBox: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n  dataLine: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  instructionsBox: {\n    marginTop: 28,\n  },\n  slider: {\n    width: 200,\n  },\n  theme: {\n    color: '#087b08',\n    fontWeight: 500\n  },\n  genre: {\n    color: '#e66d52',\n    fontWeight: 500\n  },\n  mechanic: {\n    color: '#3b28da',\n    fontWeight: 500\n  },\n  dialogRoot: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  dialogCloseButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  dialogTextBox: {\n    padding: 8,\n    backgroundColor: '#e8e8e8'\n  }\n}))\n\n\nfunction App(props) {\n\tconst { formatMessage } = props.intl\n  const classes = useStyles()\n\n  const [genres, setGenre] = React.useState([ data.getRandomGenre() ])\n  const [mechanics, setMechanic] = React.useState([ data.getRandomMechanic() ])\n  const [themes, setTheme] = React.useState([ data.getRandomTheme() ])\n  const [mechSlider, setSlider] = React.useState(1)\n  const [openDialog, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const updArrayOnIndex = (arr, index, value) => {\n    const aux = [...arr]\n    aux[index] = value\n    return [...aux]\n  }\n\n  const updArraySize = (arr, newSize, newDataCallback) => {\n    const aux = [...arr]\n    if (aux.length > newSize) {\n      // remove item\n      return aux.slice(0, newSize)\n    } else {\n      // add items\n      [...Array(newSize - aux.length).keys()].forEach(index => {\n        aux.push(newDataCallback())\n      })\n    }\n    return [...aux]\n  }\n\n  const onRandomize = () => {\n    setGenre(genres.map(_ => data.getRandomGenre()))\n    setTheme(themes.map(_ => data.getRandomTheme()))\n    setMechanic(mechanics.map(_ => data.getRandomMechanic()))\n  }\n\n  const handleSlider = (value) => {\n    setSlider(value)\n    setMechanic(updArraySize(mechanics, value, data.getRandomMechanic))\n  }\n\n  useEffect(() => {\n    // check url querystring\n    try {\n      const parsed = queryString.parse(location.search)\n      if (parsed && parsed.g) {\n        const m = !!parsed.m ? parseInt(parsed.m) : 1\n        const indexes = parsed.g.split('.')\n        if (indexes.length !== 2 + m) {\n          throw 'Not enough parameters. malformed querystring'\n        }\n        const pThemes = indexes.slice(0, 1)\n        const pMechanics = indexes.slice(1, 1+m)\n        const pGenres = indexes.slice(1+m, 2+m)\n        setGenre(pGenres.map(i => data.getGenre(i)))\n        setMechanic(pMechanics.map(i => data.getMechanic(i)))\n        setTheme(pThemes.map(i => data.getTheme(i)))\n        setSlider(m)\n      }\n    } catch (e) {\n      console.warn(e)\n      setGenre([data.getRandomGenre()])\n      setMechanic([data.getRandomMechanic()])\n      setTheme([data.getRandomTheme()])\n    }\n  }, [])\n\n  const renderGenreTags = () => {\n    return genres.map((genre, index) => {\n      return (\n        <RandomTag\n          key={`genre-${index}`}\n          text={genre}\n          color=\"#e66d52\"\n          tooltip={formatMessage(translateMessages.genre)}\n          onClick={() => { setGenre(updArrayOnIndex(genres, index, data.getRandomGenre()))}}\n        />\n      )\n    })\n  }\n\n  const renderMechanicTags = () => {\n    return mechanics.map((mech, index) => {\n      return (\n        <RandomTag\n          key={`mech-${index}`}\n          text={mech}\n          color=\"#3b28da\"\n          tooltip={formatMessage(translateMessages.mechanic)}\n          onClick={() => { setMechanic(updArrayOnIndex(mechanics, index, data.getRandomMechanic()))}}\n        />\n      )\n    })\n  }\n\n  const renderThemeTags = () => {\n    return themes.map((theme, index) => {\n      return (\n        <RandomTag\n          key={`theme-${index}`}\n          text={theme}\n          color=\"#087b08\"\n          tooltip={formatMessage(translateMessages.theme)}\n          onClick={() => { setTheme(updArrayOnIndex(themes, index, data.getRandomTheme()))}}\n        />\n      )\n    })\n  }\n\n  const protocol = 'https'\n  const githubName = 'andremicheletti'\n  const repoName = 'game-idea-generator'\n  const shareUrl = `${protocol}://${githubName}.github.io/${repoName}/${data.buildUrl(genres, themes, mechanics, mechSlider)}`\n  const shareTitle = 'Check out this game idea'\n  const shareMessage = \"I've generated a random game idea using this simple tool, check it out!\"\n\n  return (\n    <div className={classes.root}>\n\n      <AppBar position=\"relative\">\n        <Toolbar className={classes.toolbar}>\n\t\t\t\t\t<div style={{ display: 'flex', flexDirection: 'row', flexShrink: 1, alignItems: 'center' }}>\n\t\t\t\t\t\t<img src={gamepadIcon} width=\"100\" height=\"50\" />\n\t\t\t\t\t\t<a href=\"/\" style={{ textDecoration: 'none', color: 'inherit' }}>\n\t\t\t\t\t\t\t<Typography variant=\"h4\" color=\"inherit\" noWrap>\n\t\t\t\t\t\t\t\t{formatMessage(translateMessages.title)}\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={{ display: 'flex', flexDirection: 'row', flex: 1, flexGrow: 1, alignItems: 'center', justifyContent: 'flex-end' }}>\n\t\t\t\t\t\t<Link href=\"/pt/\">\n\t\t\t\t\t\t\t<img src={ptIcon} width=\"35\" height=\"35\"/>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<div style={{ width: 10 }}></div>\n\t\t\t\t\t\t<Link href=\"/en/\">\n\t\t\t\t\t\t\t<img src={enIcon} width=\"35\" height=\"35\"/>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n        </Toolbar>\n      </AppBar>\n\n      <Dialog open={openDialog}>\n        <DialogTitle className={classes.dialogRoot}>\n          <Typography component=\"p\" variant=\"h5\">{formatMessage(translateMessages.share)}</Typography>\n          <IconButton aria-label=\"close\" className={classes.dialogCloseButton} onClick={handleClose}>\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent>\n          <div className={classes.dialogTextBox}>\n            <Typography variant=\"subtitle1\" style={{ fontWeight: 'normal' }}>\n              {shareUrl}\n            </Typography>\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <EmailShareButton url={shareUrl} title={shareTitle} body={shareMessage}>\n            <EmailIcon round />\n          </EmailShareButton>\n          <FacebookShareButton url={shareUrl} quote={shareMessage}>\n            <FacebookIcon round />\n          </FacebookShareButton>\n          <RedditShareButton url={shareUrl} title={shareMessage}>\n            <RedditIcon round />\n          </RedditShareButton>\n          <WhatsappShareButton url={shareUrl} title={shareMessage}>\n            <WhatsappIcon round />\n          </WhatsappShareButton>\n          <TelegramShareButton url={shareUrl} title={shareMessage}>\n            <TelegramIcon round />\n          </TelegramShareButton>\n          <TwitterShareButton url={shareUrl} title={shareMessage}>\n            <TwitterIcon round />\n          </TwitterShareButton>\n        </DialogActions>\n      </Dialog>\n\n      <main>\n        <Container component=\"main\" className={classes.main} maxWidth=\"md\">\n\n          <Box my={4} className={classes.formBox}>\n            <div>\n              <Typography id=\"discrete-slider\" gutterBottom>\n                {formatMessage(translateMessages.mechanicSliderLabel)}\n              </Typography>\n              <Slider\n                className={classes.slider}\n                defaultValue={1}\n                value={mechSlider}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1} marks\n                min={1}\n                max={3}\n                onChangeCommitted={(_, value) => { handleSlider(value)}}\n              />\n            </div>\n            <Button variant=\"contained\" color=\"primary\" onClick={() => onRandomize()}>\n              {formatMessage(translateMessages.randomize)}\n            </Button>\n          </Box>\n\n          <Card className={classes.card}>\n            <CardHeader\n              title={(\n                <Typography variant=\"h4\" style={{ color: 'white' }}>\n                  {formatMessage(translateMessages.gameIdeaTitle)}\n                </Typography>\n              )}\n            />\n            <CardContent>\n              <div className={classes.dataLine}>\n                {renderThemeTags()}\n                {renderMechanicTags()}\n                {renderGenreTags()}\n              </div>\n            </CardContent>\n            <CardActions>\n              <Tooltip title={formatMessage(translateMessages.share)} aria-label=\"share\">\n                <IconButton aria-label=\"share\" color=\"primary\" onClick={() => handleOpen()}>\n                  <ShareIcon />\n                </IconButton>\n              </Tooltip>\n            </CardActions>\n          </Card>\n\n          <Container maxWidth=\"sm\" className={classes.instructionsBox}>\n            <Typography variant=\"h4\">\n\t\t\t\t\t\t\t{formatMessage(translateMessages.howToTitle)}\n            </Typography>\n            <Typography variant=\"body1\" style={{ marginTop: 3 }}>\n\t\t\t\t\t\t\t{formatMessage(translateMessages.howToDescription)}\n              <span className={classes.theme}> {formatMessage(translateMessages.theme)}</span>, \n              <span className={classes.mechanic}> {formatMessage(translateMessages.mechanics)}</span> {formatMessage(translateMessages.and)} \n              <span className={classes.genre}> {formatMessage(translateMessages.genre)}</span>\n            </Typography>\n            <br />\n            <Typography variant=\"body1\">\n              \n\t\t\t\t\t\t\t{formatMessage(translateMessages.howToStart)} <span className={classes.mechanic}>{\" \"}{formatMessage(translateMessages.mechanics)}</span> \n\t\t\t\t\t\t\t{\" \"} {formatMessage(translateMessages.howToMiddle)}\n              <Typography color=\"primary\" variant=\"button\">\n               {\" \"} {formatMessage(translateMessages.randomize)} {\" \"}\n              </Typography>\n\t\t\t\t\t\t\t{formatMessage(translateMessages.howToEnd)}\n               \n            </Typography>\n            <br />\n            <Typography variant=\"body1\">\n\t\t\t\t\t\t\t{formatMessage(translateMessages.howToFineTune)}\n            </Typography>\n          </Container>\n\n        </Container>\n      </main>\n\n      <footer className={classes.footer}>\n        <Container maxWidth=\"sm\" className={classes.footerContainer}>\n          <Typography variant=\"body1\">\n\t\t\t\t\t\t{formatMessage(translateMessages.madeWith)}\n\t\t\t\t\t\t<FavoriteIcon color=\"error\" />\n\t\t\t\t\t\t{formatMessage(translateMessages.by)}\n\t\t\t\t\t\t<Link href=\"https://andregamedev.itch.io/\">{\" \"}AndreGameDev</Link>\n\t\t\t\t\t</Typography>\n          <Copyright />\n        </Container>\n      </footer>\n\n    </div>\n  )\n}\n\nexport default injectIntl(App)\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n    text: {\n      primary: '#333',\n      secondary: '#555'\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nimport { IntlProvider } from 'react-intl';\n\nArray.prototype.random = function () {\n  return this[Math.floor((Math.random()*this.length))];\n}\n\nlet language = 'pt';\n// try {\n// \tconst path = location.pathname.split('/').filter(obj => !!obj);\n// \tlanguage = path[path.length - 1];\n// \tif (!language) {\n// \t\tthrow `language ${language}`\n// \t}\n// } catch (e) {\n// \tconsole.warn(e)\n// \tlanguage = 'en'\n// }\nlet messages = require(`./locales/${language}.json`);\n\nReactDOM.render(\n\t<IntlProvider locale=\"pt\" messages={messages}>\n\t\t<ThemeProvider theme={theme}>\n\t\t\t{/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n\t\t\t<CssBaseline />\n\t\t\t<App />\n\t\t</ThemeProvider>\n\t</IntlProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}